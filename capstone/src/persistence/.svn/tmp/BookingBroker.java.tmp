/**
 * Feb 18, 2010
 * BookingBroker.java
 */
package persistence;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import problemDomain.AdditionalCharge;
import problemDomain.Booking;
import problemDomain.Catering;
import problemDomain.Client;
import problemDomain.Facility;
import problemDomain.Invoice;

/**
 * @author cantleyc
 *
 */
public class BookingBroker implements Broker {
	private Database db = new Database();
	private static BookingBroker broker;
	
	private BookingBroker() {
		if (!db.connect("com.mysql.jdbc.Driver", "jdbc:mysql://localhost/indusdb", "indusdb", "DrqTAhbG9HaVzL64"))
			System.exit(-1);
	}
	
	/**
	 * Gets the broker instance
	 * @return The current broker instance
	 */
	public static BookingBroker getBroker() {
		if (broker == null) {
			broker = new BookingBroker();
		}
		return broker;
	}

	public void close() {
		db.close();
		broker = null;
	}

	@Deprecated
	public List<Booking> getAll() {
		System.err.println("Use getBookingsForFacility, getBookingForClient or getBookingsForInvoice. We will never get ALL the bookings in the database");
		return null;
	}

	public boolean persist(Object o) {
		Booking booking = (Booking) o;
		String query;
		
		if (booking.getId() != -1) {
			int catering_id = booking.getCatering().getId();
			if( catering_id != -1) {
				query = "UPDATE catering SET chargeName='" + booking.getCatering().getChargeName() + 
						"', charge='" + booking.getCatering().getCharge() + 
					"' WHERE catering_id='" + catering_id + "'";
				db.update(query);
			} else {
				query = "INSERT INTO catering VALUES('0'," + booking.getCatering().getChargeName() + 
						"','" + booking.getCatering().getCharge() + ",NULL')";
				catering_id = db.update(query);
			}
			
			query = "UPDATE booking SET facility_id='" + booking.getFacility().getId() + 
					"', client_id='" + booking.getClient().getId() + 
					"', employee_id='" + booking.getCreator().getId() + 
					"', booking_type='" + booking.getEventType().getId() + 
					"', invoice_no='" + booking.getInvoice_no() +  
					"', catering='" + catering_id +  
					"', rate='" + booking.getRate().getId() +  
					"', eventTitle='" + booking.getEventTitle() +  
					"', startTime='" + booking.getStartTime() +  
					"', endTime='" + booking.getEndTime() +  
					"', setupTime='" + booking.getSetupTime() +  
					"', tearDownTime='" + booking.getTearDownTime() +  
					"', numberOfPeople='" + booking.getNumberOfPeople() + 
				"' WHERE booking_id='" + booking.getId() + "'";
			db.update(query);
		} else {
			query = "INSERT INTO catering VALUES('0'," + booking.getCatering().getChargeName() + 
					"','" + booking.getCatering().getCharge() + ",NULL')";
			int catering_id = db.update(query);
				
			query = "INSERT INTO booking VALUES('0', " + booking.getFacility().getId() + 
					"','" + booking.getClient().getId() + 
					"','" + booking.getCreator().getId() + 
					"','" + booking.getEventType().getId() + 
					"','" + booking.getInvoice_no() +  
					"','" + catering_id +  
					"','" + booking.getRate().getId() +  
					"','" + booking.getEventTitle() +  
					"','" + booking.getStartTime() +  
					"','" + booking.getEndTime() +  
					"','" + booking.getSetupTime() +  
					"','" + booking.getTearDownTime() +  
					"','" + booking.getNumberOfPeople() + "')";
			int booking_id = db.update(query);
			
			ArrayList<AdditionalCharge> additionalCharges = booking.getAdditionalCharges();
			for (int i = 0; i < additionalCharges.size(); i++) {
				query = "INSERT INTO booking_additional_charges VALUES('" + additionalCharges.get(i).getId() + "', '" + booking_id + "')";
				db.update(query);
			}
			
		}
		return true;
	}

	public boolean remove(Object o) {
		Booking booking = (Booking) o;
		String query;
		
		query = "DELETE FROM booking WHERE booking_id='" + booking.getId() + "'";
		db.update(query);
		return true;
	}
	
	public List<Booking> getBookingsForFacility(Facility f, Date start, Date end) {
		ClientBroker cb = ClientBroker.getBroker();
		RateBroker rb = RateBroker.getBroker();
		AdditionalChargeBroker acb = AdditionalChargeBroker.getBroker();		
		
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		ArrayList<Booking> bookings = new ArrayList<Booking>();

		String query = "SELECT * FROM booking WHERE facility_id='" + f.getId() +"' AND startTime BETWEEN '" + dateFormat.format(start) + "' AND '" + dateFormat.format(end) + "'";
		ResultSet result = db.select(query);
		
		try {
			while (result.next()) {
				int booking_id = result.getInt("booking_id");
				int client_id = result.getInt("client_id");
				@SuppressWarnings("unused")
				int employee_id = result.getInt("employee_id");
				@SuppressWarnings("unused")
				int booking_type = result.getInt("booking_type");
				int catering_id = result.getInt("catering");
				int rate_id = result.getInt("rate");
				String eventTitle = result.getString("eventTitle");
				Date startTime = result.getDate("startTime");
				Date endTime = result.getDate("endTime");
				int setupTime = result.getInt("setupTime");
				int tearDownTime = result.getInt("tearDownTime");
				int numberOfPeople = result.getInt("numberOfPeople");
				int invoice_no = result.getInt("invoice_no");
				
				ArrayList<AdditionalCharge> additionalCharges = new ArrayList<AdditionalCharge>();
				query = "SELECT * FROM booking_additional_charges WHERE booking_id='" + booking_id + "'";
				ResultSet acResult = db.select(query);
				while (acResult.next()) {
					additionalCharges.add(acb.getAdditionalChargeInformation(acResult.getInt("additional_charge_id")));
				}
				
				Catering catering = null;
				query = "SELECT * FROM catering WHERE catering_id='" + catering_id + "' LIMIT 1";
				ResultSet cResult = db.select(query);
				while (cResult.next()) {
					catering = new Catering(cResult.getInt("catering_id"), cResult.getString("chargeName"), cResult.getDouble("charge"));
				}

				//TODO: employee and bookingtype, once brokers are finished
				Booking booking = new Booking(booking_id, eventTitle, null, startTime, endTime, setupTime, tearDownTime, cb.getClientInformation(client_id), catering, null, numberOfPeople, rb.getRateInformation(rate_id), additionalCharges, f, invoice_no);
				bookings.add(booking);
			}
			
			cb.close();
			rb.close();
			acb.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return bookings;
	}
	
	public List<Booking> getBookingsForInvoice(Invoice i) {
		return getBookingsForInvoice(i.getId());
	}
	public List<Booking> getBookingsForInvoice(int invoice_no) {
		ClientBroker cb = ClientBroker.getBroker();
		RateBroker rb = RateBroker.getBroker();
		AdditionalChargeBroker acb = AdditionalChargeBroker.getBroker();

		ArrayList<Booking> bookings = new ArrayList<Booking>();

		String query = "SELECT * FROM booking WHERE invoice_no='" + invoice_no + "'";
		ResultSet result = db.select(query);
		
		try {
			while (result.next()) {
				int booking_id = result.getInt("booking_id");
				int client_id = result.getInt("client_id");
				@SuppressWarnings("unused")
				int employee_id = result.getInt("employee_id");
				@SuppressWarnings("unused")
				int booking_type = result.getInt("booking_type");
				int catering_id = result.getInt("catering");
				int rate_id = result.getInt("rate");
				String eventTitle = result.getString("eventTitle");
				Date startTime = result.getDate("startTime");
				Date endTime = result.getDate("endTime");
				int setupTime = result.getInt("setupTime");
				int tearDownTime = result.getInt("tearDownTime");
				int numberOfPeople = result.getInt("numberOfPeople");
				
				ArrayList<AdditionalCharge> additionalCharges = new ArrayList<AdditionalCharge>();
				query = "SELECT * FROM booking_additional_charges WHERE booking_id='" + booking_id + "'";
				ResultSet acResult = db.select(query);
				while (acResult.next()) {
					additionalCharges.add(acb.getAdditionalChargeInformation(acResult.getInt("additional_charge_id")));
				}
				
				Catering catering = null;
				query = "SELECT * FROM catering WHERE catering_id='" + catering_id + "' LIMIT 1";
				ResultSet cResult = db.select(query);
				while (cResult.next()) {
					catering = new Catering(cResult.getInt("catering_id"), cResult.getString("chargeName"), cResult.getDouble("charge"));
				}

				//TODO: employee, facility and bookingtype, once brokers are finished
				Booking booking = new Booking(booking_id, eventTitle, null, startTime, endTime, setupTime, tearDownTime, cb.getClientInformation(client_id), catering, null, numberOfPeople, rb.getRateInformation(rate_id), additionalCharges, null, invoice_no);
				bookings.add(booking);
			}
			
			cb.close();
			rb.close();
			acb.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return bookings;
	}
	
	//TODO: UPDATE THIS: IT IS A COPY OF getBookingForFacility
	public List<Booking> getBookingsForClient(Client c, Date start, Date end) {
		ClientBroker cb = ClientBroker.getBroker();
		RateBroker rb = RateBroker.getBroker();
		AdditionalChargeBroker acb = AdditionalChargeBroker.getBroker();		
		
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		ArrayList<Booking> bookings = new ArrayList<Booking>();

		String query = "SELECT * FROM booking WHERE facility_id='" + c.getId() +"' AND startTime BETWEEN '" + dateFormat.format(start) + "' AND '" + dateFormat.format(end) + "'";
		ResultSet result = db.select(query);
		
		try {
			while (result.next()) {
				int booking_id = result.getInt("booking_id");
				int client_id = result.getInt("client_id");
				@SuppressWarnings("unused")
				int employee_id = result.getInt("employee_id");
				@SuppressWarnings("unused")
				int booking_type = result.getInt("booking_type");
				int catering_id = result.getInt("catering");
				int rate_id = result.getInt("rate");
				String eventTitle = result.getString("eventTitle");
				Date startTime = result.getDate("startTime");
				Date endTime = result.getDate("endTime");
				int setupTime = result.getInt("setupTime");
				int tearDownTime = result.getInt("tearDownTime");
				int numberOfPeople = result.getInt("numberOfPeople");
				int invoice_no = result.getInt("invoice_no");
				
				ArrayList<AdditionalCharge> additionalCharges = new ArrayList<AdditionalCharge>();
				query = "SELECT * FROM booking_additional_charges WHERE booking_id='" + booking_id + "'";
				ResultSet acResult = db.select(query);
				while (acResult.next()) {
					additionalCharges.add(acb.getAdditionalChargeInformation(acResult.getInt("additional_charge_id")));
				}
				
				Catering catering = null;
				query = "SELECT * FROM catering WHERE catering_id='" + catering_id + "' LIMIT 1";
				ResultSet cResult = db.select(query);
				while (cResult.next()) {
					catering = new Catering(cResult.getInt("catering_id"), cResult.getString("chargeName"), cResult.getDouble("charge"));
				}

				//TODO: employee, faciltiy and bookingtype, once brokers are finished
				Booking booking = new Booking(booking_id, eventTitle, null, startTime, endTime, setupTime, tearDownTime, cb.getClientInformation(client_id), catering, null, numberOfPeople, rb.getRateInformation(rate_id), additionalCharges, null, invoice_no);
				bookings.add(booking);
			}
			
			cb.close();
			rb.close();
			acb.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return bookings;
	}
}
