/**
 * 
 */
package logic;

import java.io.IOException;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import exceptions.DatabaseConnectionException;
import exceptions.DateInvalidException;
import exceptions.DescriptionInvalidException;
import exceptions.NameInvalidException;

import persistence.ToDoItemBroker;
import problemDomain.ToDoItem;

/**
 * @author 432873
 * 
 */
public class ToDoItemManager extends HttpServlet {
	private static final long serialVersionUID = -5195542824086927738L;
	ToDoItemBroker tb;
	
	private void processRequest(HttpServletRequest request, HttpServletResponse response) {
		
	}
	
	/**
	 * Validate 
	 * Checks ToDoName and toDoDescription to ensure it meets all required 
	 * criteria, if it does not exceptions are thrown.
	 * Checks toDoDate to ensure that it is not null, if it is a exception will be 
	 * thrown.
	 * @param ToDoName
	 * @param ToDoDescription
	 * @param ToDoDate
	 * @return
	 * @throws NameInvalidException
	 * @throws DescriptionInvalidException 
	 * @throws DateInvalidException 
	 */
	public boolean validate(String ToDoName, String ToDoDescription, String ToDoDate) throws NameInvalidException, DescriptionInvalidException, DateInvalidException
	{
		if(ToDoName == null)
			throw new NameInvalidException("An Additional Charge must have a name to identify it.");
		if(ToDoName.length() > 30)
			throw new NameInvalidException("Additional Charge name cannot excede 30 characters.");
		if(ToDoDescription != null)
			if(ToDoDescription.length() > 400)
				throw new DescriptionInvalidException("An additional charge description cannot excede 400 characters.");
		if(ToDoDate != null)
			if(new Date(ToDoDate).before(new Date()))
				throw new DateInvalidException("A new item cannot be listed for a past date/time.");
		return true;
	}
	
	/**
	 * HttpServletRequest and HttpServletResponsealidate checks toDoName and toDoDescription to ensure it meets all required
	 * criteria.
	 * Checks toDoDate to ensure it is not null, if it is a exception will be thrown.
	 * @param todo
	 * @return
	 * @throws NameInvalidException
	 * @throws DescriptionInvalidException 
	 * @throws DateInvalidException 
	 */
	public boolean validate(ToDoItem todo) throws NameInvalidException, DescriptionInvalidException, DateInvalidException
	{
		return this.validate(todo.getName(), todo.getDescription(), todo.getDate().toString());
	}

	/**
	 * Searches the DB for matching toDoitems
	 * @param query
	 * @return
	 * @throws DatabaseConnectionException 
	 */
	public List<ToDoItem> search(String query) throws DatabaseConnectionException
	{
		return tb.search(query);
	}

	/**
	 * Validates toDoName, toDoDescription to ensure they meet all criteria
	 * Checks toDoDate to ensure that it is not null, if it is a exception will be thrown
	 * Persist: will persist the supplied item into the DB
	 * @param ToDoName
	 * @param ToDoDescription
	 * @param ToDoDate
	 * @return
	 * @throws NameInvalidException
	 * @throws DescriptionInvalidException 
	 * @throws DatabaseConnectionException 
	 * @throws DateInvalidException 
	 */
	public boolean save(String ToDoName, String ToDoDescription, String ToDoDate) throws NameInvalidException, DescriptionInvalidException, DatabaseConnectionException, DateInvalidException
	{
		ToDoItem tdi = null;
		
		if(this.validate(ToDoName, ToDoDescription, ToDoDate))
			tdi = new ToDoItem(new Date(ToDoDate), ToDoName, ToDoDescription);
			
		return tb.persist(tdi);
	}
	
	/**
	 * HttpServletRequest and HttpServletResponse checks toDoName and toDoDescription
	 * to ensure they meet all criteria, checks toDoDate to ensure it is not null. 
	 * If toDoDate is null a exception will be thrown.
	 * persists the supplied object into the DB
	 * @param todo
	 * @return
	 * @throws NameInvalidException
	 * @throws DescriptionInvalidException 
	 * @throws DatabaseConnectionException 
	 * @throws DateInvalidException 
	 */
	public boolean save(ToDoItem todo) throws NameInvalidException, DescriptionInvalidException, DatabaseConnectionException, DateInvalidException
	{
		if(this.validate(todo))
			return tb.persist(todo);
		
		return false;
	}

	/**
	 * remove will remove the selected toDoItem, it will throw a 
	 * DatabaseConnectionException
	 * @param todo
	 * @return
	 * @throws DatabaseConnectionException 
	 */
	public boolean remove(ToDoItem todo) throws DatabaseConnectionException
	{
		return tb.remove(todo);
	}
	
	/**
	 * Closes the ToDoItemBroker and any open Database connections
	 */
	public void close() {
		tb.close();
	}
	
	/**
	 * Returns a Arraylist of all objects in the DB
	 * @return
	 * @throws DatabaseConnectionException 
	 */
	public List<ToDoItem> getAll() throws DatabaseConnectionException
	{
		return tb.getAll();
	}
	
	
	/**
	 * Connects to database and returns ToDoItemBroker instance
	 * @throws DatabaseConnectionException
	 */
	public ToDoItemManager () throws DatabaseConnectionException
	{
		super();
		tb = ToDoItemBroker.getBroker();
	}
	
	/**
	 * gets HttpServletRequest and HttpServletResponse, throws exceptions if error 
	 * occurs
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		processRequest(request, response);
	}

	/**
	 * Posts HttpServletRequest and HttpServletResponse
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		processRequest(request, response);
	}
}
